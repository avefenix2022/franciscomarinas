<!-- LIBRERÍA VUEjs -->
<script src='https://unpkg.com/vue'></script>
    
		<!-- Header Back -->
		<div class="header-back header-back-simple header-back-small">
			<div class="header-back-container">
				<div class="container">
					<div class="row">
						<div class="col-md-12">
							<!-- Page Info -->
							<div class="page-info page-info-simple">
								<h1 class="page-title">VUEjs</h1>
								<h2 class="page-description">VUEjs proporciona un marco reactivo para crear interfaces de usuario.</h2>
							</div>
							<!-- End Page Info -->
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- End of Header Back -->
        <!-- yield -->
        
        
        
        
        
        
        
        
        
		<div id="content">
			<div class="container">
				<div class="row">
					<div class="col-md-12">
                        
                        
                        
                        
                        
                        
                        
                        
								<!-- Table of content -->
								<div class="table-of-contents">
									<ol>
										<li>
											<a href="#" class="js-scroll-to" data-target="#vuejs">Vue.js</a>
										</li>
										<li>
											<a href="#" class="js-scroll-to" data-target="#renderizaciondeclarativa">Renderización declarativa</a>
										</li>
										<li>
											<a href="#" class="js-scroll-to" data-target="#condicionalesyloops">Condicionales y Loops</a>
										</li>
										<li>
											<a href="#" class="js-scroll-to" data-target="#manejarlaentradadelusuario">Manejar la entrada del usuario</a>
										</li>
										<li>
											<a href="#" class="js-scroll-to" data-target="#componentes">Componentes</a>
										</li>
										<li>
											<a href="#" class="js-scroll-to" data-target="#nstanciarvue">nstanciar Vue</a>
										
										<ol>
												<li>
													<a href="#" class="js-scroll-to" data-target="#constructor">Constructor</a>
												</li>
												<li>
													<a href="#" class="js-scroll-to" data-target="#propiedadesymetodos">Propiedades y Métodos</a>
												</li>
												<li>
													<a href="#" class="js-scroll-to" data-target="#ciclodevidadelainstancia">Ciclo de vida de la instancia</a>
												</li>
												<li>
													<a href="#" class="js-scroll-to" data-target="#diagramadelcliclodevida">Diagrama del cliclo de vida</a>
												</li>
												<li>
													<a href="#" class="js-scroll-to" data-target="#interpolacion">Interpolación</a>
												</li>
												
												
											</ol>
								        </li>
									</ol>
								</div>
                        
                        
                        
                        
                        
                        
                        
                        
                        
     
     
     
     
     
     

                                               
        <!-- Category Info -->
        <div class="category-info helper pt0" id="simple-highlight">
        <h3 class="category-title" id="diseno-web">Vue.js
            <!-- Fragment Identifier -->
            <a class="fragment-identifier js-fragment-identifier fragment-identifier-scroll" href="#simple-highlight">
                <i class="fa fa-link"></i>
            </a>
            <!-- End of Fragment Identifier -->
        </h3>
        <h4 class="category-description" id="">Vue.js</h4>
        
        <p>Vue (pronunciado /vjuː/, como view) es un marco progresivo para construir interfaces de usuario. A diferencia de otros marcos monolíticos, Vue está diseñado desde para ser escalable y adoptable.</p>
        
        <p>La biblioteca principal se centra únicamente en la capa de vista y es muy fácil de integrar con otras bibliotecas existentes. Por otro lado, Vue también es perfectamente capaz de alimentar sofisticadas SPAs, aplicaciones de página única.</p>
        
        <p>La forma más fácil de probar Vue.js es crear un archivo .html e incluir Vue con:</p>
        
                 <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">
								
  &lt;script src="https://unpkg.com/vue"&gt;&lt;/script&gt;
  
</code></pre> </div>
						</div>
						<!-- End of Code Highlight Attached -->
        
        
<h4 class="category-description" id="renderizaciondeclarativa">Renderización declarativa</h4>
        
        <p>El núcleo de Vue.js es un sistema que nos permite declarar datos al DOM usando una sintaxis simple:</p>
        
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app"&gt;
    {{ message }}
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var app = new Vue({
    el: '#app',
        data: {
            message: 'Hola Vue!'
        }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como:</p>						
<div id="app1">
   <p> {{ message }} </p>
</div>
        
<script>
var app = new Vue({
    el: '#app1',
        data: {
            message: 'Hola Vue!'
        }
})
</script>      
        
        
         
         
         <p>¡Ya hemos creado nuestra primera aplicación Vue! Los datos y el DOM están ahora enlazados.</p>
         
         <p>Además de la interpolación de texto, también podemos enlazar atributos de elementos como este:</p>
         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app-2"&gt;
  &lt;span v-bind:title="message"&gt;
    Hover your mouse over me for a few seconds
    to see my dynamically bound title!
  &lt;/span&gt;
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var app2 = new Vue({
  el: '#app-2',
  data: {
    message: 'You loaded this page on ' + new Date()
  }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como (al poner el cursor encima del párrafo aparece el tooltip):</p>						
<div id="app2">
  <span v-bind:title="message">
    ¡Coloca tu ratón sobre mí unos segundo para ver mi título dinámico!
  </span>
</div>
        
<script>
var app2 = new Vue({
  el: '#app2',
  data: {
    message: 'Tu cargate esta página el ' + new Date()
  }
})
</script>
                             
            <p>El atributo <code>v-bind</code> se denomina <strong>directiva</strong>. <strong>Las directivas</strong> están prefijadas con <code>v-</code> para indicar que son atributos especiales proporcionados por Vue, y aplican un <strong>comportamiento reactivo</strong> especial al DOM. Aquí se dice básicamente "mantener actualizado el atributo <code>title</code> de este elemento con la propiedad <code>menssage</code> en la instancia de Vue".</p>
            
                         
<h4 class="category-description" id="condicionalesyloops">Condicionales y Loops</h4> 
            
            <p>Con condicionales:</p>
         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app-3"&gt;
  &lt;p v-if="seen"&gt;Now you see me&lt;/p&gt;
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var app3 = new Vue({
  el: '#app-3',
  data: {
    seen: true
  }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como:</p>	            
<div id="app-3">
  <p v-if="seen">Ahora tu me ves</p>
</div>

<script>
var app3 = new Vue({
  el: '#app-3',
  data: {
    seen: true
  }
})            
</script>
        
            <p>Este ejemplo demuestra que podemos vincular datos no solo a texto y atributos, sino también a la estructura del DOM. Además, Vue también proporciona un potente sistema de efectos de transición que puede aplicar automáticamente <strong>efectos de transición</strong> cuando los elementos son insertados / actualizados / eliminados por Vue.</p>
            <p>Existen bastantes otras directivas, cada una con su propia funcionalidad especial. Por ejemplo, la directiva <code>v-for</code> se puede utilizar para mostrar una lista de elementos que utilizan los datos de un Array:</p>
         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app-4"&gt;
  &lt;ol&gt;
    &lt;li v-for="todo in todos"&gt;
      {{ todo.text }}
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var app4 = new Vue({
  el: '#app-4',
  data: {
    todos: [
      { text: 'Learn JavaScript' },
      { text: 'Learn Vue' },
      { text: 'Build something awesome' }
    ]
  }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como:</p>	            
<div id="app-4">
  <ol>
    <li v-for="todo in todos">
      {{ todo.text }}
    </li>
  </ol>
</div>
    
<script>
var app4 = new Vue({
  el: '#app-4',
  data: {
    todos: [
      { text: 'Learn JavaScript' },
      { text: 'Learn Vue' },
      { text: 'Build something awesome' }
    ]
  }
})            
</script>
            
                         
<h4 class="category-description" id="manejarlaentradadelusuario">Manejar la entrada del usuario</h4> 
                    
<p>Para permitir que los usuarios interactúen con la aplicación, podemos usar la directiva <code>v-on</code> para conectar a los oyentes de eventos que invocan métodos en nuestras instancias Vue:</p>
         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app-5"&gt;
  &lt;button v-on:click="reverseMessage"&gt;Reverse Message&lt;/button&gt;
  &lt;p&gt;{{ message }}&lt;/p&gt;
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var app5 = new Vue({
  el: '#app-5',
  data: {
    message: 'Hello Vue.js!'
  },
  methods: {
    reverseMessage: function () {
      this.message = this.message.split('').reverse().join('')
    }
  }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como:</p>	                     
<div id="app-5">
  <button v-on:click="reverseMessage">Invertir Mensaje</button>
  <p>{{ message }}</p>
</div>
                         
<script>
var app5 = new Vue({
  el: '#app-5',
  data: {
    message: 'Hola Vue.js!'
  },
  methods: {
    reverseMessage: function () {
      this.message = this.message.split('').reverse().join('')
    }
  }
})
</script>

                                                  
                  		
<p>El método simplemente actualizamos el estado de nuestra aplicación sin tocar el DOM - todas las manipulaciones de DOM son manejadas por Vue, y el código que escribimos se centra en la lógica subyacente.
</p>
<p>Vue también proporciona la directiva <code>v-model</code> que hace que la unión bidireccional entre la entrada de formularios y el estado de la aplicación sea sencilla:</p>                		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app-6"&gt;
  &lt;input v-model="message"&gt;
  &lt;p&gt;{{ message }}&lt;/p&gt;
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var app6 = new Vue({
  el: '#app-6',
  data: {
    message: 'Hello Vue!'
  }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como:</p>	                              
<div id="app-6">
  <input v-model="message">
  <p>{{ message }}</p>
</div>


<script>
 var app6 = new Vue({
  el: '#app-6',
  data: {
    message: 'Hello Vue!'
  }
})   
</script>                 		
                  		         		
                  		         		         		
                  		         		         		         		
                  		         		         		         		         		

<h4 class="category-description" id="componentes">Componentes</h4> 

<p>El sistema de componentes es otro concepto importante en Vue, porque es una abstracción que nos permite construir aplicaciones a gran escala compuestas de componentes pequeños, autónomos y reutilizables. Si pensamos en ello, casi cualquier tipo de interfaz de aplicación puede ser abstraído en un árbol de componentes:</p>                  
<img src="images/components.png" alt="" class="img-responsive">

<p>En Vue, un componente es esencialmente una instancia Vue con opciones predefinidas. Registrar un componente en Vue es sencillo:</p>               		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
                   

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
// Define a new component called todo-item
Vue.component('todo-item', {
  template: '<li>This is a todo</li>'
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Ahora se puede componer en la plantilla de otro componente:</p>               		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;ol&gt;
  &lt;!-- Create an instance of the todo-item component --&gt;
  &lt;todo-item&gt;&lt;/todo-item&gt;
&lt;/ol&gt;</code></pre></div>                      

						</div>
						<!-- End of Code Highlight Attached -->                  
                                                                        
 <p>Pero esto haría el mismo texto para cada tarea, que no es muy interesante. Deberíamos ser capaces de pasar datos del ámbito padre a componentes secundarios. Modifiquemos la definición del componente para que acepte un <code>prop</code>:</p>               		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
Vue.component('todo-item', {
  // The todo-item component now accepts a
  // "prop", which is like a custom attribute.
  // This prop is called todo.
  props: ['todo'],
  template: '<li>{{ todo.text }}</li>'
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
                                                                                                                                                                                                     
<p>Ahora podemos pasar el tarea a cada componente repetido usando <code>v-bind</code>:</p>               		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app-7"&gt;
  &lt;ol&gt;
    &lt;!-- Now we provide each todo-item with the todo object    --&gt;
    &lt;!-- it's representing, so that its content can be dynamic --&gt;
    &lt;todo-item v-for="item in groceryList" v-bind:todo="item"&gt;&lt;/todo-item&gt;
  &lt;/ol&gt;
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
Vue.component('todo-item', {
  props: ['todo'],
  template: '<li>{{ todo.text }}</li>'
})
var app7 = new Vue({
  el: '#app-7',
  data: {
    groceryList: [
      { text: 'Vegetables' },
      { text: 'Cheese' },
      { text: 'Whatever else humans are supposed to eat' }
    ]
  }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como:</p>	                                                 
<div id="app-7">
  <ol>
    <!-- Now we provide each todo-item with the todo object    -->
    <!-- it's representing, so that its content can be dynamic -->
    <todo-item v-for="item in groceryList" v-bind:todo="item"></todo-item>
  </ol>
</div>

<script>
Vue.component('todo-item', {
  props: ['todo'],
  template: '<li>{{ todo.text }}</li>'
})
var app7 = new Vue({
  el: '#app-7',
  data: {
    groceryList: [
      { text: 'Vegetables' },
      { text: 'Cheese' },
      { text: 'Whatever else humans are supposed to eat' }
    ]
  }
})            
</script>

<p>Este es sólo un ejemplo, pero hemos logrado separar nuestra aplicación en dos unidades más pequeñas, y el hijo está razonablemente bien desacoplado de los padres a través de la interfaz de accesorios. Ahora podemos mejorar aún más nuestro componente &lt;todo-item&gt; con una plantilla y una lógica más complejas sin afectar la aplicación principal.</p>

<p>En una aplicación grande, es necesario dividir toda la aplicación en componentes para que el desarrollo sea manejable. Aaquí hay un ejemplo (imaginario) del aspecto de la plantilla de una aplicación con los componentes:</p>              		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app"&gt;
  &lt;app-nav&gt;&lt;/app-nav&gt;
  &lt;app-view&gt;
    &lt;app-sidebar&gt;&lt;/app-sidebar&gt;
    &lt;app-content&gt;&lt;/app-content&gt;
  &lt;/app-view&gt;
&lt;/div&gt;</code></pre></div>                      

						</div>
						<!-- End of Code Highlight Attached -->








<h4 class="category-description" id="relacionconelementospersonalizados">Relación con elementos personalizados </h4> 
<p>Los componentes de Vue son muy similares a los elementos personalizados, que son parte de la especificación de componentes web.</p>
<p>Esto se debe a que la sintaxis de los componentes de Vue se modela poco a poco según la especificación. Por ejemplo, los componentes Vue implementan la API Slot y el atributo especial is. Sin embargo, hay algunas diferencias clave:</p>
<ol>
    <li>La especificación de componentes Web todavía está en estado de borrador y no se implementa de forma nativa en todos los exploradores. En comparación, los componentes Vue no requieren ningún polyfills y funcionan de forma consistente en todos los navegadores compatibles (IE9 y superiores). Cuando es necesario, los componentes de Vue también se pueden envolver dentro de un elemento personalizado nativo.</li>
    <li>Los componentes de Vue proporcionan características importantes que no están disponibles en elementos sencillos, especialmente el flujo de datos de componentes cruzados, la comunicación de eventos personalizados y las integraciones de herramientas de construcción.</li>
</ol>






<h4 class="category-description" id="instanciarvue">Instanciar Vue</h4>




<h4 class="category-description" id="Constructor">Constructor</h4> 


<p>Cada Vue vm se inicia mediante la creación de una instancia Vue de raíz con la función de constructor Vue:</p>               		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">                     

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var vm = new Vue({
  // options
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->

<p>Aunque no está estrictamente asociado con el patrón MVVM, el diseño de Vue se inspiró parcialmente en él. Como convención, a menudo usamos la variable vm (abreviatura de VIstaModelo) para referirnos a nuestras instancias Vue.</p>

<p>Cuando se instancia una instancia Vue, es necesario pasar un objeto de opciones que puede contener opciones de datos, plantilla, elemento para montar, métodos, callbacks del ciclo de vida y más. La lista completa de opciones se puede encontrar en la referencia de la API.</p>

<p>El constructor Vue puede ampliarse para crear constructores de componentes reutilizables con opciones predefinidas:</p>               		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">                     

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var MyComponent = Vue.extend({
  // extension options
})
// all instances of `MyComponent` are created with
// the pre-defined extension options
var myComponentInstance = new MyComponent()</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->


<p>Aunque es posible crear instancias extendidas imperativamente, la mayoría de las veces se recomienda componerlas declarativamente en plantillas como elementos personalizados.</p>

<p>Todos los componentes de Vue son esencialmente instancias Vue ampliadas.</p>






<h4 class="category-description" id="propiedadesymetodos">Propiedades y Métodos</h4>

<p>Cada instancia Vue proxies todas las propiedades encontradas en su objeto de datos:</p>               		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">                     

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var data = { a: 1 }
var vm = new Vue({
  data: data
})
vm.a === data.a // -> true
// setting the property also affects original data
vm.a = 2
data.a // -> 2
// ... and vice-versa
data.a = 3
vm.a // -> 3</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
						
<p>Debe tenerse en cuenta que sólo estas propiedades aproximadas son reactivas. Si agrega una nueva propiedad a la instancia después de haberla creado, no activará ninguna actualización de vista. Discutiremos el sistema de reactividad en detalle más adelante.</p>

<p>Además de las propiedades de los datos, las instancias de Vue exponen una serie de propiedades y métodos útiles de la instancia. Estas propiedades y métodos tienen el prefijo $ para diferenciarlos de las propiedades de los datos proxiados. Por ejemplo:</p>               		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">                     

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var data = { a: 1 }
var vm = new Vue({
  el: '#example',
  data: data
})
vm.$data === data // -> true
vm.$el === document.getElementById('example') // -> true
// $watch is an instance method
vm.$watch('a', function (newVal, oldVal) {
  // this callback will be called when `vm.a` changes
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->


<p>No utilice funciones de flecha en una propiedad de instancia o devolución de llamada (por ejemplo, vm. $ Watch ('a', newVal => this.myMethod ())). Como las funciones de flecha están vinculadas al contexto padre, esta no será la instancia de Vue como se esperaría y this.myMethod será indefinido.</p>







<h4 class="category-description" id="ciclodevidadelainstancia">Ciclo de vida de la instancia</h4>

<p>Cada instancia de Vue pasa por una serie de pasos de inicialización cuando se crea - por ejemplo, necesita configurar la observación de datos, compilar la plantilla, montar la instancia en el DOM y actualizar el DOM cuando cambia de datos. A lo largo del camino, también invocará algunos ganchos del ciclo de vida, que nos dan la oportunidad de ejecutar lógica personalizada. Por ejemplo, se llama al gancho creado después de crear la instancia:</p>               		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">                     

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var vm = new Vue({
  data: {
    a: 1
  },
  created: function () {
    // `this` points to the vm instance
    console.log('a is: ' + this.a)
  }
})
// -> "a is: 1"</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->


<p>También hay otros ganchos que serán llamados en diferentes etapas del ciclo de vida de la instancia, por ejemplo montado, actualizado y destruido. </p>

<p>Todos los ganchos del ciclo de vida se llaman con su contexto apuntando a la instancia de Vue invocándolo. Usted puede haber estado preguntándose dónde vive el concepto de "controladores" en el mundo Vue y la respuesta es: no hay controladores. Su lógica personalizada para un componente se dividiría entre estos ganchos del ciclo de vida.</p>







<h4 class="category-description" id="diagramadelcliclodevida">Diagrama del cliclo de vida</h4>

<p>Diagrama del ciclo de vida de la instancia. No es necesario comprender completamente todo lo que está pasando en este momento, pero este diagrama será útil en el futuro.</p>

                 
<img src="images/lifecycle.png" alt="" class="img-responsive">


<p>Vue.js utiliza una sintaxis de plantilla basada en HTML que le permite declarativamente enlazar el DOM procesado con los datos de la instancia de Vue subyacente. </p>

<p>Todas las plantillas de Vue.js son HTML válido que puede ser analizado por navegadores compatibles con especificaciones y analizadores de HTML.</p>

<p>Bajo el capó, Vue compila las plantillas en funciones de renderización de DOM virtual. Combinado con el sistema de reactividad, Vue es capaz de calcular inteligentemente la cantidad mínima de componentes para volver a representar y aplicar la cantidad mínima de manipulaciones DOM cuando cambia el estado de la aplicación.</p>

<p>Si está familiarizado con los conceptos de DOM virtual y prefiere la potencia bruta de JavaScript, también puede escribir directamente funciones de render en lugar de plantillas, con soporte opcional de JSX.</p>









 
 
<h4 class="category-description" id="interpolacion">Interpolación</h4>



<h4 class="category-description" id="texto">Texto</h4>

<p>La forma más básica de vinculación de datos es la interpolación de texto utilizando la sintaxis doble llaves:</p>

        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;span&gt;Message: {{ msg }}&lt;/span&gt;</code></pre></div>                      

						</div>
						<!-- End of Code Highlight Attached -->


<p>La etiqueta con las llaves dobles será reemplazada por el valor de la propiedad msg en el objeto de datos correspondiente. También se actualizará cada vez que cambie la propiedad msg del objeto de datos.</p>

<p>También puede realizar interpolaciones únicas que no se actualizan en el cambio de datos mediante la directiva v-once, pero tenga en cuenta que esto también afectará a cualquier enlace en el mismo nodo:</p>

        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;span v-once&gt;This will never change: {{ msg }}&lt;/span&gt;</code>code></pre></div>                      

						</div>
						<!-- End of Code Highlight Attached -->









 
 
<h4 class="category-description" id="v-html">v-html</h4>

<p>La doble llave interpreta los datos como texto sin formato, no HTML. Para poder imprimir HTML real, necesitará usar la directiva v-html:</p>

        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div v-html="rawHtml"&gt;&lt;/div&gt;</code>code></pre></div>                      

						</div>
						<!-- End of Code Highlight Attached -->
						
<p>El contenido se inserta como HTML simple - los enlaces de datos se ignoran. Tenga en cuenta que no puede utilizar v-html para componer particiones de plantilla, ya que Vue no es un motor de plantillas basado en cadenas. En su lugar, se prefieren los componentes como la unidad fundamental para la reutilización y composición de la UI.</p>

<p>La renderización dinámica de HTML arbitrario en su sitio web puede ser muy peligrosa porque puede conducir fácilmente a vulnerabilidades XSS. Utilice únicamente la interpolación HTML en el contenido de confianza y nunca en el contenido proporcionado por el usuario.</p>








</div></div></div></div>


