<!-- LIBRERÍA VUEjs -->
<script src='https://unpkg.com/vue'></script>
    
		<!-- Header Back -->
		<div class="header-back header-back-simple header-back-small">
			<div class="header-back-container">
				<div class="container">
					<div class="row">
						<div class="col-md-12">
							<!-- Page Info -->
							<div class="page-info page-info-simple">
								<h1 class="page-title">VUEjs</h1>
								<h2 class="page-description">VUEjs proporciona un marco reactivo para crear interfaces de usuario.</h2>
							</div>
							<!-- End Page Info -->
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- End of Header Back -->
        <!-- yield -->
        
        
        
        
        
        
        
        
        
		<div id="content">
			<div class="container">
				<div class="row">
					<div class="col-md-12">
                        
                        
                        
                        
                        
                        
                        
                        
								<!-- Table of content -->
								<div class="table-of-contents">
									<ol>
										<li>
											<a href="#" class="js-scroll-to" data-target="#vuejs">Vue.js</a>
										</li>
										<li>
											<a href="#" class="js-scroll-to" data-target="#renderizaciondeclarativa">Renderización declarativa</a>
										</li>
										<li>
											<a href="#" class="js-scroll-to" data-target="#condicionalesyloops">Condicionales y Loops</a>
										</li>
										<li>
											<a href="#" class="js-scroll-to" data-target="#manejarlaentradadelusuario">Manejar la entrada del usuario</a>
										</li>
										<li>
											<a href="#" class="js-scroll-to" data-target="#componentes">Componentes/a>
										</li>
									</ol>
								</div>
                        
                        
                        
                        
                        
                        
                        
                        
                        
     
     
     
     
     
     

                                               
        <!-- Category Info -->
        <div class="category-info helper pt0" id="simple-highlight">
        <h3 class="category-title" id="diseno-web">Vue.js
            <!-- Fragment Identifier -->
            <a class="fragment-identifier js-fragment-identifier fragment-identifier-scroll" href="#simple-highlight">
                <i class="fa fa-link"></i>
            </a>
            <!-- End of Fragment Identifier -->
        </h3>
        <h4 class="category-description" id="">Vue.js</h4>
        
        <p>Vue (pronunciado /vjuː/, como view) es un marco progresivo para construir interfaces de usuario. A diferencia de otros marcos monolíticos, Vue está diseñado desde para ser escalable y adoptable.</p>
        
        <p>La biblioteca principal se centra únicamente en la capa de vista y es muy fácil de integrar con otras bibliotecas existentes. Por otro lado, Vue también es perfectamente capaz de alimentar sofisticadas SPAs, aplicaciones de página única.</p>
        
        <p>La forma más fácil de probar Vue.js es crear un archivo .html e incluir Vue con:</p>
        
                 <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">
								
  &lt;script src="https://unpkg.com/vue"&gt;&lt;/script&gt;
  
</code></pre> </div>
						</div>
						<!-- End of Code Highlight Attached -->
        
        
<h4 class="category-description" id="renderizaciondeclarativa">Renderización declarativa</h4>
        
        <p>El núcleo de Vue.js es un sistema que nos permite declarar datos al DOM usando una sintaxis simple:</p>
        
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app"&gt;
    {{ message }}
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var app = new Vue({
    el: '#app',
        data: {
            message: 'Hola Vue!'
        }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como:</p>						
<div id="app1">
   <p> {{ message }} </p>
</div>
        
<script>
var app = new Vue({
    el: '#app1',
        data: {
            message: 'Hola Vue!'
        }
})
</script>      
        
        
         
         
         <p>¡Ya hemos creado nuestra primera aplicación Vue! Los datos y el DOM están ahora enlazados.</p>
         
         <p>Además de la interpolación de texto, también podemos enlazar atributos de elementos como este:</p>
         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app-2"&gt;
  &lt;span v-bind:title="message"&gt;
    Hover your mouse over me for a few seconds
    to see my dynamically bound title!
  &lt;/span&gt;
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var app2 = new Vue({
  el: '#app-2',
  data: {
    message: 'You loaded this page on ' + new Date()
  }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como (al poner el cursor encima del párrafo aparece el tooltip):</p>						
<div id="app2">
  <span v-bind:title="message">
    ¡Coloca tu ratón sobre mí unos segundo para ver mi título dinámico!
  </span>
</div>
        
<script>
var app2 = new Vue({
  el: '#app2',
  data: {
    message: 'Tu cargate esta página el ' + new Date()
  }
})
</script>
                             
            <p>El atributo <code>v-bind</code> se denomina <strong>directiva</strong>. <strong>Las directivas</strong> están prefijadas con <code>v-</code> para indicar que son atributos especiales proporcionados por Vue, y aplican un <strong>comportamiento reactivo</strong> especial al DOM. Aquí se dice básicamente "mantener actualizado el atributo <code>title</code> de este elemento con la propiedad <code>menssage</code> en la instancia de Vue".</p>
            
                         
<h4 class="category-description" id="condicionalesyloops">Condicionales y Loops</h4> 
            
            <p>Con condicionales:</p>
         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app-3"&gt;
  &lt;p v-if="seen"&gt;Now you see me&lt;/p&gt;
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var app3 = new Vue({
  el: '#app-3',
  data: {
    seen: true
  }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como:</p>	            
<div id="app-3">
  <p v-if="seen">Ahora tu me ves</p>
</div>

<script>
var app3 = new Vue({
  el: '#app-3',
  data: {
    seen: true
  }
})            
</script>
        
            <p>Este ejemplo demuestra que podemos vincular datos no solo a texto y atributos, sino también a la estructura del DOM. Además, Vue también proporciona un potente sistema de efectos de transición que puede aplicar automáticamente <strong>efectos de transición</strong> cuando los elementos son insertados / actualizados / eliminados por Vue.</p>
            <p>Existen bastantes otras directivas, cada una con su propia funcionalidad especial. Por ejemplo, la directiva <code>v-for</code> se puede utilizar para mostrar una lista de elementos que utilizan los datos de un Array:</p>
         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app-4"&gt;
  &lt;ol&gt;
    &lt;li v-for="todo in todos"&gt;
      {{ todo.text }}
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var app4 = new Vue({
  el: '#app-4',
  data: {
    todos: [
      { text: 'Learn JavaScript' },
      { text: 'Learn Vue' },
      { text: 'Build something awesome' }
    ]
  }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como:</p>	            
<div id="app-4">
  <ol>
    <li v-for="todo in todos">
      {{ todo.text }}
    </li>
  </ol>
</div>
    
<script>
var app4 = new Vue({
  el: '#app-4',
  data: {
    todos: [
      { text: 'Learn JavaScript' },
      { text: 'Learn Vue' },
      { text: 'Build something awesome' }
    ]
  }
})            
</script>
            
                         
<h4 class="category-description" id="manejarlaentradadelusuario">Manejar la entrada del usuario</h4> 
                    
<p>Para permitir que los usuarios interactúen con la aplicación, podemos usar la directiva <code>v-on</code> para conectar a los oyentes de eventos que invocan métodos en nuestras instancias Vue:</p>
         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app-5"&gt;
  &lt;button v-on:click="reverseMessage"&gt;Reverse Message&lt;/button&gt;
  &lt;p&gt;{{ message }}&lt;/p&gt;
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var app5 = new Vue({
  el: '#app-5',
  data: {
    message: 'Hello Vue.js!'
  },
  methods: {
    reverseMessage: function () {
      this.message = this.message.split('').reverse().join('')
    }
  }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como:</p>	                     
<div id="app-5">
  <button v-on:click="reverseMessage">Invertir Mensaje</button>
  <p>{{ message }}</p>
</div>
                         
<script>
var app5 = new Vue({
  el: '#app-5',
  data: {
    message: 'Hola Vue.js!'
  },
  methods: {
    reverseMessage: function () {
      this.message = this.message.split('').reverse().join('')
    }
  }
})
</script>

                                                  
                  		
<p>El método simplemente actualizamos el estado de nuestra aplicación sin tocar el DOM - todas las manipulaciones de DOM son manejadas por Vue, y el código que escribimos se centra en la lógica subyacente.
</p>
<p>Vue también proporciona la directiva <code>v-model</code> que hace que la unión bidireccional entre la entrada de formularios y el estado de la aplicación sea sencilla:</p>                		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app-6"&gt;
  &lt;input v-model="message"&gt;
  &lt;p&gt;{{ message }}&lt;/p&gt;
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
var app6 = new Vue({
  el: '#app-6',
  data: {
    message: 'Hello Vue!'
  }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como:</p>	                              
<div id="app-6">
  <input v-model="message">
  <p>{{ message }}</p>
</div>


<script>
 var app6 = new Vue({
  el: '#app-6',
  data: {
    message: 'Hello Vue!'
  }
})   
</script>                 		
                  		         		
                  		         		         		
                  		         		         		         		
                  		         		         		         		         		

<h4 class="category-description" id="componentes">Componentes</h4> 

<p>El sistema de componentes es otro concepto importante en Vue, porque es una abstracción que nos permite construir aplicaciones a gran escala compuestas de componentes pequeños, autónomos y reutilizables. Si pensamos en ello, casi cualquier tipo de interfaz de aplicación puede ser abstraído en un árbol de componentes:</p>                  
<img src="images/components.png" alt="" class="img-responsive">

<p>En Vue, un componente es esencialmente una instancia Vue con opciones predefinidas. Registrar un componente en Vue es sencillo:</p>               		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
                   

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
// Define a new component called todo-item
Vue.component('todo-item', {
  template: '<li>This is a todo</li>'
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Ahora se puede componer en la plantilla de otro componente:</p>               		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;ol&gt;
  &lt;!-- Create an instance of the todo-item component --&gt;
  &lt;todo-item&gt;&lt;/todo-item&gt;
&lt;/ol&gt;</code></pre></div>                      

						</div>
						<!-- End of Code Highlight Attached -->                  
                                                                        
 <p>Pero esto haría el mismo texto para cada tarea, que no es muy interesante. Deberíamos ser capaces de pasar datos del ámbito padre a componentes secundarios. Modifiquemos la definición del componente para que acepte un <code>prop</code>:</p>               		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
Vue.component('todo-item', {
  // The todo-item component now accepts a
  // "prop", which is like a custom attribute.
  // This prop is called todo.
  props: ['todo'],
  template: '<li>{{ todo.text }}</li>'
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
                                                                                                                                                                                                     
<p>Ahora podemos pasar el tarea a cada componente repetido usando <code>v-bind</code>:</p>               		

         
         
        <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
						
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">

&lt;div id="app-7"&gt;
  &lt;ol&gt;
    &lt;!-- Now we provide each todo-item with the todo object    --&gt;
    &lt;!-- it's representing, so that its content can be dynamic --&gt;
    &lt;todo-item v-for="item in groceryList" v-bind:todo="item"&gt;&lt;/todo-item&gt;
  &lt;/ol&gt;
&lt;/div&gt;</code></pre></div>                      

							<div class="code-highlight  code-highlight-with-label" data-label="JavaScript">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
								
Vue.component('todo-item', {
  props: ['todo'],
  template: '<li>{{ todo.text }}</li>'
})
var app7 = new Vue({
  el: '#app-7',
  data: {
    groceryList: [
      { text: 'Vegetables' },
      { text: 'Cheese' },
      { text: 'Whatever else humans are supposed to eat' }
    ]
  }
})</code></pre></div>
						</div>
						<!-- End of Code Highlight Attached -->
<p>Que se renderizará como:</p>	                                                 
<div id="app-7">
  <ol>
    <!-- Now we provide each todo-item with the todo object    -->
    <!-- it's representing, so that its content can be dynamic -->
    <todo-item v-for="item in groceryList" v-bind:todo="item"></todo-item>
  </ol>
</div>

<script>
Vue.component('todo-item', {
  props: ['todo'],
  template: '<li>{{ todo.text }}</li>'
})
var app7 = new Vue({
  el: '#app-7',
  data: {
    groceryList: [
      { text: 'Vegetables' },
      { text: 'Cheese' },
      { text: 'Whatever else humans are supposed to eat' }
    ]
  }
})            
</script>































</div></div></div></div>


