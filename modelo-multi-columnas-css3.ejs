
		<!-- Header Back -->
		<div class="header-back header-back-simple header-back-small">
			<div class="header-back-container">
				<div class="container">
					<div class="row">
						<div class="col-md-12">
							<!-- Page Info -->
							<div class="page-info page-info-simple">
								<h1 class="page-title">CSS Multi-column Layout</h1>
								<h2 class="page-description">El nuevo módulo CSS3 supera muchos de los problemas asociados con la generación de diseños de columnas, manejando automáticamente el flujo y la distribución del contenido; Y el soporte del navegador ya es bastante bueno, por lo que es relativamente seguro empezar a usar este módulo hoy!</h2>
							</div>
							<!-- End Page Info -->
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- End of Header Back -->
        <!-- yield -->
        
        
        
        
        
        
        
        
        
		<div id="content">
			<div class="container">
				<div class="row">
					<div class="col-md-12">
                        
                        
                        
                        
                        
                        
                        
                        
								<!-- Table of content -->
								<div class="table-of-contents">
									<ol>
										<li>
											<a href="#" class="js-scroll-to" data-target="#diseno-web">CSS Multi-column Layout</a>
										</li>
									</ol>
								</div>
                        
                        
                        
                        
                        
                        
                        
                        
                        
     
     
     
     
     
     

                                               
        <!-- Category Info -->
        <div class="category-info helper pt0" id="simple-highlight">
        <h3 class="category-title" id="diseno-web">CSS Multi-column Layout
            <!-- Fragment Identifier -->
            <a class="fragment-identifier js-fragment-identifier fragment-identifier-scroll" href="#simple-highlight">
                <i class="fa fa-link"></i>
            </a>
            <!-- End of Fragment Identifier -->
        </h3>
        <h4 class="category-description" id="">El módulo CSS Multi-column Layout proporciona una solución a cómo organizar el contenido para que ocupe múltiples contenedores verticales.</h4>
         
         <p>El módulo CSS Multi-column Layout proporciona una solución a uno de los problemas fundamentales de diseño que han enfrentado a los diseñadores web desde los primeros días de la Web: cómo organizar el contenido para que ocupe múltiples contenedores verticales, como un periódico o una revista. 
         <br> Con el paso de los años, diseñadores web ingeniosos han desarrollado una variedad de soluciones para crear diseños de varias columnas. Inicialmente esto implicaba usar tablas para alinear columnas de contenido como si cada elemento fuera un valor en una celda. Más recientemente, combinaciones inteligentes de elementos flotantes, elementos de compensación y JavaScript ocasionalmente han proporcionado una solución más semántica, pero ninguno de estos enfoques es particularmente adecuado para crear diseños de varias columnas. El nuevo módulo CSS3 supera muchos de los problemas asociados con la generación de dichos diseños, manejando automáticamente el flujo y la distribución del contenido; Y el soporte del navegador ya es bastante bueno, por lo que es relativamente seguro empezar a usar este módulo hoy!</p>
         
         <p>El módulo de columnas múltiples amplía el modelo de caja CSS existente. Los navegadores que no entienden las propiedades de diseño de varias columnas los ignoran, convirtiendo el área de contenido en una sola columna en lugar de varias columnas.</p>
         
         <p>Antes de concentrarse en la teoría y los nombres de propiedad / valores, veamos un ejemplo..</p>
         
         <!-- Code Highlight Attached -->
						<div class="code-highlight-attached">
							<div class="code-highlight code-highlight-with-label" data-label="HTML">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-markup js-code">
&lt;article class="multicol"&gt;  
  
  &lt;h1&gt;Moby Dick; Or the Whale Lorem ipsum dolor sit amet, consectetur 
  adipisicing elit. Voluptates eum ipsam sed ullam nulla consequuntur non quos?
   Laudantium molestiae numquam consequatur, sapiente. Voluptatem distinctio 
   suscipit similique ut harum nisi hic.&lt;/h1&gt;   
  &lt;h2&gt;by Herman Melville&lt;/h2&gt;   
  &lt;figure&gt;     
    &lt;img src="https://source.unsplash.com/WLUHO9A_xik/1600x900" 
    alt="unsplash" /&gt;     
    &lt;figcaption&gt;Voyage of the Pequod, illustrated by Everett Henry&lt;/figcaption&gt;
  &lt;/figure&gt; 
  
  &lt;p&gt;Call me Ishmael. Some years ago—never mind how long precisely—having
   little or no money in my purse, and nothing particular to interest me on 
   shore, I thought I would sail about a little Lorem ipsum dolor sit amet, 
   ...
   ... 
   How then is this? Are the green fields gone? What do they here?&lt;/p&gt; 

&lt;/article&gt; 

</code></pre> </div>
							<div class="code-highlight code-highlight-with-label" data-label="CSS">
								<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-css js-code">
.multicol {   
  position:       relative;   
  margin:         0 auto;   
  max-width:      960px;   
  columns:        4 12em;   
  column-gap:     4em;   
  column-rule:    4px double red; 
} 

.multicol p {   
  padding:        0.25em; 
} 

.multicol figure {   
  margin:         0;   
  padding:        0;   
  width:          100%; 
}   

figcaption {   
  color:          #999;   
  font-size:      0.7em; 
} 

.multicol img {   
  width:          100%; 
} 

.multicol h1 {   
  column-span:    all;   
  margin:         0.25em 0;   
  padding:        0; 
} 

.multicol h2 {   
  margin:         0.25em 0;   
  padding:        0; 
}
</code></pre></div>

						</div>
						<!-- End of Code Highlight Attached -->
         
         
         <p data-height="400" data-theme-id="0" data-slug-hash="MJVKoo" data-default-tab="result" data-user="franciscomarinas" data-embed-version="2" data-pen-title="Modelo de columnas múltiples" class="codepen">See the Pen <a href="http://codepen.io/franciscomarinas/pen/MJVKoo/">Modelo de columnas múltiples</a> by Francisco (<a href="http://codepen.io/franciscomarinas">@franciscomarinas</a>) on <a href="http://codepen.io">CodePen</a>.</p>
        <script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
          
          
       
    </div>

<!-- End of Caregory Info -->

                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		
        <!-- Category Info -->
        <div class="category-info helper pt0" id="simple-highlight">
        <h3 class="category-title" id="diseno-web">Sintaxis y Estructura
            <!-- Fragment Identifier -->
            <a class="fragment-identifier js-fragment-identifier fragment-identifier-scroll" href="#simple-highlight">
                <i class="fa fa-link"></i>
            </a>
            <!-- End of Fragment Identifier -->
        </h3>
        <h4 class="category-description" id="">El módulo CSS Multi-column Layout proporciona una solución a cómo organizar el contenido para que ocupe múltiples contenedores verticales.</h4>
         
         <p>El módulo CSS Multi-column Layout amplía el modelo de caja CSS existente con un total de diez propiedades adicionales.
             <br>Cada uno de ellos proporciona control sobre un aspecto de la forma en que el contenido se procesa en columnas 
             dentro del contenedor. Debido a que todas las propiedades afectan a un único contenedor, el módulo es muy fácil de entender y, lo más importante, fácil de implementar desde el punto de vista del navegador.</p>
             
             <p>Puede ver la última tabla de soporte del navegador para CSS Multi-column en: <a href="http://caniuse.com/">Can I Use ...</a></p>
             <a href="http://caniuse.com/"><img src="images/caniuse.jpg" alt="Wb Can I Use ... http://caniuse.com/" class="img-responsive"></a>
         

          
       
       
       
       
       
       
       
        <h4 class="category-description" id="">Conceptos Básicos</h4>
        <p>El módulo CSS3 Multi-column Layout introduce diez nuevas propiedades que se pueden aplicar a elementos de nivel de bloque. Además de las nuevas propiedades que controlan el número de columnas, distribución, ancho y divisiones, algunas nuevas palabras clave están disponibles para ayudar a controlar cómo se rompe el contenido de las columnas.</p>
        <p>Crear un diseño de varias columnas es muy sencillo con el módulo de múltiples columnas. No hay propiedades innecesariamente complicadas de aprender; Y porque todo sucede en un solo elemento, no hay necesidad de preocuparse acerca de cómo el contenido se envolverá fuera de su contenedor</p>
        <p>Con sólo las diez propiedades, puede hacer lo siguiente:</p>
        <ul>
            <li>Convertir un elemento de una sola columna existente en un elemento de varias columnas</li>
            <li>Incluir contenido automáticamente entre columnas</li>
            <li>Controlar cómo las columnas llenan el espacio disponible, ya sea expandiéndolo para llenar el contenedor o bien siempre se adhiere a un tamaño preestablecido (que es útil para crear diseños responsivos)</li>
            <li>Definir los bordes que aparecen entre las columnas y el ancho del canal</li>
            <li>Renderizar el contenido para que abarque varias columnas para romper el diseño columnar cuando se desee</li>
        </ul>
        
        <p>Vale la pena destacar el tercer elemento en la lista de cosas CSS Multi-column Layout le permite hacer. Es un módulo de diseño ideal para usar si desea orientar y paginar contenido para múltiples configuraciones de dispositivos diferentes. 
        <br>La naturaleza sensible de las columnas CSS no se limita al texto. Las imágenes también se adhieren a la disposición de la columna, por lo que mediante técnicas de imagen típicas adaptativas, también puede hacer que las imágenes se escalan para adaptarse a la pantalla que se utiliza para ver una página. Este es un gran ahorro de tiempo y otra buena razón para familiarizarse con el módulo.</p>
        
        
        
        
        
        
        
        <h4 class="category-description" id="">Entendiendo la terminológia</h4>
        <p>A diferencia de algunos de los otros módulos de diseño, el módulo CSS Multi-column Layout utiliza un paradigma de diseño existente que todos conocemos. Esto hace que sea muy fácil de entender y empezar a utilizar.</p>
        <p>Una columna es una división vertical en la que se representa el contenido, dentro de un contenedor global. Un contenedor puede contener una o más columnas, con el contenido fluyendo de uno a otro de acuerdo con las reglas del lenguaje que se está utilizando. Las columnas se procesan de izquierda a derecha. A medida que el contenido desborda la primera columna, comienza a visualizarse en la parte superior de la siguiente columna. Cuando se han utilizado todas las columnas, el contenido se desborda de acuerdo con las reglas normales de HTML / CSS, aunque esto puede dar lugar a columnas adicionales.</p>
        <p>Una de las ventajas del módulo CSS Multi-column es que la altura del contenedor se calcula automáticamente para acomodar todo el contenido de forma predeterminada. Esto es útil y uno de los principales beneficios de utilizar el módulo sobre algunas de las soluciones más antiguas. Fuera de la caja, el contenido también se equilibra automáticamente en todas las columnas, lo que resulta en un agradable bloque de contenido delineado en columnas ordenadas para que coincida con su especificación.</p>
        
        <img src="images/ulti-column-layouts.jpg" alt="" class="img-responsive">
        
        
        
        
        
        
        
        
        
        <h4 class="category-description" id="">Marcado HTML</h4>
        <p>No necesito hablar del HTML, porque se usa un elemento semántico estándar como contenedor del contenido. No hay requisitos especiales de marcado para utilizar el diseño de columnas múltiples CSS; Cualquier elemento de bloque puede tener aplicadas a él varias columnas utilizando este módulo.</p>
        
        
        
        
        
        
        
        
        
        <h4 class="category-description" id="">Modelo Multi Columnas</h4>
        <p>Hay algunas cosas que debe advertirse acerca de cómo se procesa el contenido en el contenedor. 
        <br>En el modelo de caja CSS original, el contenido de un elemento fluye en el cuadro de contenido de ese elemento.</p>  
        <p>CSS Multi-column Layout introduce un nuevo tipo de contenedor que existe entre el cuadro de contenido y el contenido real. Esto es referido por el W3C como el cuadro de columna (columna para abreviar). El contenido fluye automáticamente entre columnas dentro de un elemento, en la dirección en línea (o lectura). Esto es de izquierda a derecha en idiomas latinos como el español. El resultado del listado generado a 320 píxeles de ancho: la resolución de teléfono más común.</p>
        
        <p>Las columnas se organizan en filas. Todas las columnas tienen una anchura y una altura comunes dentro de una fila. Las columnas pueden tener espacio entre ellas, que se conoce como la brecha de la columna (o canal al hablar de la impresión). En la mayoría de los casos en pantalla, un elemento dividido en columnas sólo tiene una fila. Sin embargo, hay casos especiales en los que un elemento puede contener varias filas de columnas. Los documentos impresos también pueden consistir en varias filas, donde un área de contenido ocupa más de una página impresa. </p>
        
        <p>Utilizo el lenguaje del W3C al explicar la disposición de múltiples columnas CSS3 Layout. Por esa razón, me refiero al elemento multicol cuando se habla del contenedor que tiene las propiedades de varias columnas que se le aplican. Un elemento de varias columnas (<code>multicol</code>) es cualquier contenedor cuyo <code>column-width</code> (ancho de columna) o <code>column-count</code> (recuento de columnas) no se establece en <code>auto</code>. Como has visto, en este caso estoy usando un elemento &lt;article&gt;. Para evitar la confusión, también uso multicol como el nombre de la clase que pertenece a este elemento.</p>
        
        <p>Todas las propiedades individuales cubiertas en la siguiente sección se aplican al elemento <code>multicol</code>. En CSS3, no es posible establecer propiedades y valores en columnas individuales. Para ser claro, esto significa que <strong>no se puede asignar fondo, relleno o margen para una columna específicamente</strong>.</p>
        
        <p>El relleno <code>pading</code>y el margen <code>margin</code> aplicados a un elemento <code>multicol</code> son aplicados al contenedor, no a sus columnas</p>
        
        <p>Aunque no se pueden controlar columnas individuales, es importante entender que el renderizador del navegador las trata como cajas separadas a nivel de bloque como las celdas de tabla. Cada cuadro de columna actúa como el bloque de contenido para su contenido. Esto significa, por ejemplo, que el <code>margin</code> y el <code>padding</code> aplicados a un elemento de párrafo representado en una columna se aplican contra el borde del bloque que contiene la columna.</p>
        
        
        
        
        
        
        
        
        <h4 class="category-description" id="">Propiedades CSS</h4>
        <p>La propiedad columns es una abreviatura para definir valores para dos propiedades CSS</p>
        
        
        <div class="code-highlight code-highlight-with-label" data-label="CSS">
		<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-css js-code">
.multicol {  
    columns: 4 12em; 
}
</code></pre></div>
       
       <h5>column-count</h5>
       <p><code>column-count</code> define el número de columnas en las que se debe dividir un elemento <code>multicol</code>. Las reglas determinan si el navegador respeta esta propiedad. Si no se especifica o se establece en auto, el espacio se divide según el valor de la propiedad <code>width-column</code>.</p>
       
       
       
       <h5>column-widt</h5>
       <p><code>column-width</code> especifica el ancho mínimo que cada columna debe ocupar dentro del elemento <code>multicol</code>. Tenga en cuenta que he dicho mínimo, no definitivo! Una vez más, el motor de renderizado sigue una serie de reglas lógicas para determinar si esta regla se cumple estrictamente. Si no se especifica o se establece en auto, el ancho de columna se determina por el número de columnas en las que se divide, de acuerdo con el valor de la propiedad <code>column-count</code>.</p>
       
       
       
       <h5>columns</h5>
       <p>La propiedad <code>columns</code> es un método abreviado eficaz para la combinación de las propiedades <code>column-count</code> y <code>column-width</code>. Dependiendo de los valores que se pasan a la propiedad <code>columns</code>, el navegador interpreta sus intenciones de manera diferente, por lo que es importante comprender todas las permutaciones posibles. He tomado prestado el código de ejemplo del W3C para ayudar a ilustrarlo. Una manera simple de recordar cómo funciona esto es que si utiliza un valor único con una unidad, el navegador interpreta esto como un valor de ancho de columna. Si omite una unidad, el valor se interpretará como un valor de recuento de columnas. Si no está seguro, especifique dos valores: uno con una unidad para el <code>width</code> y uno sin unidad para <code>count</code>.</p>
       
       
       
        <div class="code-highlight code-highlight-with-label" data-label="CSS">
		<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-css js-code">
columns: 12em;      /* equates to column-width: 12em; column-count: auto */ 
columns: auto 12em; /* equates to column-width: 12em; column-count: auto */ 
columns: 2;         /* equates to column-width: auto; column-count: 2    */ 
columns: 2 auto;    /* equates to column-width: auto; column-count: 2    */ 
columns: auto;      /* equates to column-width: auto; column-count: auto */ 
columns: auto auto; /* equates to column-width: auto; column-count: auto */ 
</code></pre></div>
        
        
        
        
        <h5>Las reglas para eliminar columnas y cambiar anchos</h5>
        <p>Como se mencionó, el motor de renderizado del navegador no siempre se adhiere estrictamente a su definición de la anchura y el número total de columnas para un elemento <code>multicol</code>. Las reglas de cómo y cuándo cambiar la intención de renderizado están definidas por la especificación del módulo de diseño de columnas múltiples CSS3 del W3C. El W3C ofrece una lista de pseudocódigo para mostrar la lógica que se va a aplicar.</p>
       
       
       
        <div class="code-highlight code-highlight-with-label" data-label="Pseudocódigo CSS">
		<span class="js-copy-to-clipboard copy-code">copy</span> <pre><code class="language-javascript js-code">
if ((column-width = auto) and (column-count = auto)) then     
    exit; /* not a multicol element */ 
    
if ((available-width = unknown) and (column-count = auto)) then     
    exit; /* no columns */ 
if (available-width = unknown) and (column-count != auto) and (column-width != auto) then     
    N := column-count;     
    W := column-width;     
    exit; 
if (available-width = unknown) then    
    available-width := shrink-to-fit; 
    
if (column-width = auto) and (column-count != auto) then     
    N := column-count;     
    W := max(0, (available-width - ((N - 1) * column-gap)) / N);     
    exit; 
    
if (column-width != auto) and (column-count = auto) then     
    N := max(1, floor((available-width + column-gap) / (column-width + column-gap)));     
    W := ((available-width + column-gap) / N) - column-gap;     
    exit; 
    
if (column-width != auto) and (column-count != auto) then     
    N := min(column-count, floor((available-width + column-gap) / (column-width + column-gap)))     
    W := ((available-width + column-gap) / N) - column-gap;     
    Exit
</code></pre></div>
       
       <p>Las reglas y condiciones son comparadas y actuadas en orden:</p>
       
       <ul>
           <li>Si las propiedades del <code>column-count</code> y del <code>column-width</code> están desactivadas o establecidas en auto, no se renderizan columnas. Lo mismo es cierto si el recuento de columnas <code>column-count</code> se establece en auto y el ancho del elemento <code>multicol</code> no está restringido.</li>
           <li></li>
           <li></li>
           <li></li>
           <li></li>
       </ul>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        </div>

<!-- End of Caregory Info -->

                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		
                  		

                   
</div></div></div></div>